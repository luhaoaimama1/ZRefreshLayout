apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

// JitPack Maven
apply plugin: 'com.github.dcendents.android-maven'
// Your Group
group = 'com.github.luhaoaimama1'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 14
//        targetSdkVersion 24
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    compileOnly 'androidx.recyclerview:recyclerview:1.0.0'
    api 'com.github.luhaoaimama1:ZAnimate:2.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

task makeJar(type: Copy) {
    delete 'output/test.jar' //删除已经存在的jar包
    from('build/intermediates/bundles/release/')//从该目录下加载要打包的文件
    into('output/')//jar包的保存目录
    include('classes.jar')//设置过滤，只打包classes文件
    rename('classes.jar', 'test.jar')//重命名，mylibrary.jar 根据自己的需求设置
}

makeJar.dependsOn(build)

apply plugin: 'org.jetbrains.dokka'

//dokka {
//    packageOptions {
//        prefix = "com.mylib.myannotation"
//        suppress = true
//    }
//}

//kotlin  生成文档
task generateSourcesJar(type: Jar) {
    group = 'jar'
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    options.encoding = "UTF-8"
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = javadoc.destinationDir
}


task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
    group = 'jar'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives generateJavadoc
    archives generateSourcesJar
}